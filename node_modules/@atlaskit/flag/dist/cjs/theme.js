"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFlagTheme = exports.flagFocusRingColor = exports.flagShadowColor = exports.flagTextColor = exports.flagBorderColor = exports.flagBackgroundColor = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _theme = require("@atlaskit/theme");

var _button = require("@atlaskit/button");

var lightButtonBackground = 'rgba(255, 255, 255, 0.08)';
var flagBackgroundColor = (0, _theme.themed)('appearance', {
  error: {
    light: _theme.colors.R400,
    dark: _theme.colors.R300
  },
  info: {
    light: _theme.colors.N500,
    dark: _theme.colors.N500
  },
  normal: {
    light: _theme.colors.N0,
    dark: _theme.colors.DN50
  },
  success: {
    light: _theme.colors.G400,
    dark: _theme.colors.G300
  },
  warning: {
    light: _theme.colors.Y200,
    dark: _theme.colors.Y300
  }
});
exports.flagBackgroundColor = flagBackgroundColor;
var flagBorderColor = (0, _theme.themed)('appearance', {
  // $FlowFixMe - theme is not found in props
  normal: {
    light: _theme.colors.N60A
  }
});
exports.flagBorderColor = flagBorderColor;
var flagTextColor = (0, _theme.themed)('appearance', {
  error: {
    light: _theme.colors.N0,
    dark: _theme.colors.DN40
  },
  info: {
    light: _theme.colors.N0,
    dark: _theme.colors.DN600
  },
  normal: {
    light: _theme.colors.N500,
    dark: _theme.colors.DN600
  },
  success: {
    light: _theme.colors.N0,
    dark: _theme.colors.DN40
  },
  warning: {
    light: _theme.colors.N700,
    dark: _theme.colors.DN40
  }
});
exports.flagTextColor = flagTextColor;
var flagShadowColor = (0, _theme.themed)('appearance', {
  error: {
    light: _theme.colors.N50A,
    dark: _theme.colors.N50A
  },
  info: {
    light: _theme.colors.N50A,
    dark: _theme.colors.N50A
  },
  normal: {
    light: _theme.colors.N50A,
    dark: _theme.colors.N50A
  },
  success: {
    light: _theme.colors.N50A,
    dark: _theme.colors.N50A
  },
  warning: {
    light: _theme.colors.N50A,
    dark: _theme.colors.N50A
  }
}); // $FlowFixMe - theme is not found in props

exports.flagShadowColor = flagShadowColor;
var flagFocusRingColor = (0, _theme.themed)('appearance', {
  error: {
    light: _theme.colors.N40,
    dark: _theme.colors.N40
  },
  info: {
    light: _theme.colors.N40,
    dark: _theme.colors.N40
  },
  normal: {
    light: _theme.colors.B100,
    dark: _theme.colors.link
  },
  success: {
    light: _theme.colors.N40,
    dark: _theme.colors.N40
  },
  warning: {
    light: _theme.colors.N200,
    dark: _theme.colors.N200
  }
});
exports.flagFocusRingColor = flagFocusRingColor;
var shared = {
  textDecoration: {
    hover: 'underline',
    active: 'underline'
  }
};

var getFlagTheme = function getFlagTheme(theme) {
  return (0, _objectSpread3.default)({}, theme, (0, _defineProperty2.default)({}, _button.themeNamespace, (0, _objectSpread3.default)({}, theme && theme[_button.themeNamespace], {
    success: (0, _objectSpread3.default)({}, shared, {
      color: {
        default: (0, _theme.themed)({
          light: _theme.colors.N0,
          dark: _theme.colors.DN40
        }),
        hover: (0, _theme.themed)({
          light: _theme.colors.N0,
          dark: _theme.colors.DN40
        }),
        active: (0, _theme.themed)({
          light: _theme.colors.N0,
          dark: _theme.colors.DN40
        })
      },
      background: {
        default: (0, _theme.themed)({
          light: lightButtonBackground,
          dark: _theme.colors.N30A
        })
      }
    }),
    info: (0, _objectSpread3.default)({}, shared, {
      color: {
        default: (0, _theme.themed)({
          light: _theme.colors.N0,
          dark: _theme.colors.DN600
        }),
        hover: (0, _theme.themed)({
          light: _theme.colors.N0,
          dark: _theme.colors.DN600
        }),
        active: (0, _theme.themed)({
          light: _theme.colors.N0,
          dark: _theme.colors.DN600
        })
      },
      background: {
        default: (0, _theme.themed)({
          light: lightButtonBackground,
          dark: lightButtonBackground
        })
      }
    }),
    error: (0, _objectSpread3.default)({}, shared, {
      color: {
        default: (0, _theme.themed)({
          light: _theme.colors.N0,
          dark: _theme.colors.DN600
        }),
        hover: (0, _theme.themed)({
          light: _theme.colors.N0,
          dark: _theme.colors.DN600
        }),
        active: (0, _theme.themed)({
          light: _theme.colors.N0,
          dark: _theme.colors.DN600
        })
      },
      background: {
        default: (0, _theme.themed)({
          light: lightButtonBackground,
          dark: _theme.colors.N30A
        })
      }
    }),
    warning: (0, _objectSpread3.default)({}, shared, {
      color: {
        default: (0, _theme.themed)({
          light: _theme.colors.N700,
          dark: _theme.colors.DN40
        }),
        hover: (0, _theme.themed)({
          light: _theme.colors.N700,
          dark: _theme.colors.DN40
        }),
        active: (0, _theme.themed)({
          light: _theme.colors.N700,
          dark: _theme.colors.DN40
        })
      },
      background: {
        default: (0, _theme.themed)({
          light: _theme.colors.N30A,
          dark: _theme.colors.N30A
        })
      }
    }),
    normal: {}
  })));
};

exports.getFlagTheme = getFlagTheme;