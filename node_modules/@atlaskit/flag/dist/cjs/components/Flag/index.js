"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FlagWithoutAnalytics = exports.DEFAULT_APPEARANCE = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _analyticsNext = require("@atlaskit/analytics-next");

var _cross = _interopRequireDefault(require("@atlaskit/icon/glyph/cross"));

var _chevronUp = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-up"));

var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/glyph/chevron-down"));

var _package = require("../../../package.json");

var _styledFlag = _interopRequireWildcard(require("./styledFlag"));

var _Expander = _interopRequireDefault(require("../Expander"));

var _FlagActions = _interopRequireDefault(require("../FlagActions"));

var _theme = require("../../theme");

var DEFAULT_APPEARANCE = 'normal';
exports.DEFAULT_APPEARANCE = DEFAULT_APPEARANCE;

var Flag =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Flag, _Component);

  function Flag() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Flag);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Flag)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "props", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      isExpanded: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "dismissFlag", function () {
      if (_this.props.isDismissAllowed && _this.props.onDismissed) {
        _this.props.onDismissed(_this.props.id);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "isBold", function () {
      return _this.props.appearance !== DEFAULT_APPEARANCE;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "toggleExpand", function () {
      _this.setState({
        isExpanded: !_this.state.isExpanded
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderToggleOrDismissButton", function () {
      var _this$props = _this.props,
          appearance = _this$props.appearance,
          description = _this$props.description,
          actions = _this$props.actions,
          isDismissAllowed = _this$props.isDismissAllowed,
          onDismissed = _this$props.onDismissed;

      var isBold = _this.isBold();

      if (!isDismissAllowed || !isBold && !onDismissed || isBold && !description && (!actions || !actions.length)) {
        return null;
      }

      var ChevronIcon = _this.state.isExpanded ? _chevronUp.default : _chevronDown.default;
      var ButtonIcon = isBold ? ChevronIcon : _cross.default;
      var buttonLabel = isBold ? 'Toggle flag body' : 'Dismiss flag';
      var buttonAction = isBold ? _this.toggleExpand : _this.dismissFlag;
      var size = ButtonIcon === ChevronIcon ? 'large' : 'small';
      return _react.default.createElement(_styledFlag.DismissButton, {
        appearance: appearance,
        "aria-expanded": _this.state.isExpanded // $FlowFixMe - theme is not found in props
        ,
        focusRingColor: (0, _theme.flagFocusRingColor)(_this.props),
        onClick: buttonAction,
        type: "button"
      }, _react.default.createElement(ButtonIcon, {
        label: buttonLabel,
        size: size
      }));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "renderBody", function () {
      var _this$props2 = _this.props,
          actions = _this$props2.actions,
          appearance = _this$props2.appearance,
          description = _this$props2.description,
          linkComponent = _this$props2.linkComponent;
      var isExpanded = !_this.isBold() || _this.state.isExpanded;
      return _react.default.createElement(_Expander.default, {
        isExpanded: isExpanded
      }, description && _react.default.createElement(_styledFlag.Description, {
        appearance: appearance
      }, description), _react.default.createElement(_FlagActions.default, {
        actions: actions,
        appearance: appearance,
        linkComponent: linkComponent
      }));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseDown", function (e) {
      e.preventDefault();
    });
    return _this;
  }

  (0, _createClass2.default)(Flag, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var actions = nextProps.actions,
          description = nextProps.description;

      if (this.isBold() && this.state.isExpanded && !description && (!actions || !actions.length)) {
        this.toggleExpand();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          appearance = _this$props3.appearance,
          icon = _this$props3.icon,
          title = _this$props3.title,
          onMouseOver = _this$props3.onMouseOver,
          onFocus = _this$props3.onFocus,
          onMouseOut = _this$props3.onMouseOut,
          onBlur = _this$props3.onBlur;
      var autoDismissProps = {
        onMouseOver: onMouseOver,
        onFocus: onFocus,
        onMouseOut: onMouseOut,
        onBlur: onBlur
      };
      var OptionalDismissButton = this.renderToggleOrDismissButton;
      var Body = this.renderBody;
      return _react.default.createElement(_styledFlag.default, (0, _extends2.default)({
        appearance: appearance,
        role: "alert",
        tabIndex: "0",
        onMouseDown: this.handleMouseDown
      }, autoDismissProps), _react.default.createElement(_styledFlag.Header, null, _react.default.createElement(_styledFlag.Icon, null, icon), _react.default.createElement(_styledFlag.Title, {
        appearance: appearance
      }, title), _react.default.createElement(OptionalDismissButton, null)), _react.default.createElement(_styledFlag.Content, null, _react.default.createElement(Body, null)));
    }
  }]);
  return Flag;
}(_react.Component);

exports.FlagWithoutAnalytics = Flag;
(0, _defineProperty2.default)(Flag, "defaultProps", {
  actions: [],
  appearance: DEFAULT_APPEARANCE,
  isDismissAllowed: false
});
var createAndFireEventOnAtlaskit = (0, _analyticsNext.createAndFireEvent)('atlaskit');

var _default = (0, _analyticsNext.withAnalyticsContext)({
  componentName: 'flag',
  packageName: _package.name,
  packageVersion: _package.version
})((0, _analyticsNext.withAnalyticsEvents)({
  onBlur: createAndFireEventOnAtlaskit({
    action: 'blurred',
    actionSubject: 'flag',
    attributes: {
      componentName: 'flag',
      packageName: _package.name,
      packageVersion: _package.version
    }
  }),
  onDismissed: createAndFireEventOnAtlaskit({
    action: 'dismissed',
    actionSubject: 'flag',
    attributes: {
      componentName: 'flag',
      packageName: _package.name,
      packageVersion: _package.version
    }
  }),
  onFocus: createAndFireEventOnAtlaskit({
    action: 'focused',
    actionSubject: 'flag',
    attributes: {
      componentName: 'flag',
      packageName: _package.name,
      packageVersion: _package.version
    }
  })
})(Flag));

exports.default = _default;